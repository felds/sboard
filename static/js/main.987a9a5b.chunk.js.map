{"version":3,"sources":["serviceWorker.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Sound","url","code","title","collection","accent","audio","useMemo","Audio","pause","currentTime","src","useAudio","useState","isPressed","setPressed","stop","useCallback","play","useEffect","keydownHandler","e","repeat","keyupHandler","addEventListener","removeEventListener","key","replace","className","classnames","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","style","backgroundColor","sounds","ReactDOM","render","map","i","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAkBMC,EAAQ,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,IAAKC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,OACvCC,EAjBS,SAACL,GAAD,OACfM,mBAAQ,WACN,IAAMD,EAAQ,IAAIE,MAAMP,GAIxB,OAHAK,EAAMG,QACNH,EAAMI,YAAc,EACpBJ,EAAMK,IAAMV,EACLK,IACN,CAACL,IAUUW,CAASX,GAD+C,EAEtCY,oBAAS,GAF6B,mBAE/DC,EAF+D,KAEpDC,EAFoD,KAIhEC,EAAOC,uBAAY,WACvBX,EAAMG,QACNH,EAAMI,YAAc,EACpBK,GAAW,KACV,CAACT,IAEEY,EAAOD,uBAAY,WACvBD,IACAV,EAAMY,OACNH,GAAW,KACV,CAACT,EAAOU,IAEXG,qBAAU,WACR,IAAMC,EAAiB,SAACC,GAClBA,EAAEnB,OAASA,GAASmB,EAAEC,QACxBJ,KAIEK,EAAe,SAACF,GAChBA,EAAEnB,OAASA,GACbc,KAQJ,OAJApB,OAAO4B,iBAAiB,UAAWJ,GACnCxB,OAAO4B,iBAAiB,QAASD,GAG1B,WACL3B,OAAO6B,oBAAoB,UAAWL,GACtCxB,OAAO6B,oBAAoB,QAASF,MAErC,CAACrB,EAAMgB,EAAMF,IAEhB,IAAMU,GAAOxB,GAAQ,IAAIyB,QAAQ,cAAe,IAEhD,OACE,yBACEC,UAAWC,IAAW,QAASf,GAAa,kBAC5CgB,YAAaZ,EACba,UAAWf,EACXgB,aAAcd,EACde,WAAYjB,EACZkB,MAAO,CAAEC,gBAAiB9B,GAlEV,sBAoEfqB,GAAO,yBAAKE,UAAU,cAAcF,GACrC,yBAAKE,UAAU,gBAAgBzB,GAC9BC,GAAc,yBAAKwB,UAAU,qBAAqBxB,KAKnDgC,EAAS,CACb,CACE,SACA,gBACA,8DAEF,CACE,SACA,8BACA,iEAEF,CACE,SACA,2BACA,qEAEF,CACE,SACA,WACA,gEAEF,CACE,GACA,WACA,gEAEF,CACE,QACA,WACA,gEAEF,CACE,QACA,WACA,gEAEF,CACE,OACA,kBACA,8DACA,UAcJC,IAASC,OAAO,mBAVJ,WACV,OACE,yBAAKV,UAAU,SACZQ,EAAOG,KAAI,WAA6BC,GAA7B,uBAAEtC,EAAF,KAAQC,EAAR,KAAeF,EAAf,KAAoBI,EAApB,YACV,kBAAC,EAAD,CAAOqB,IAAKc,EAAGtC,KAAMA,EAAMC,MAAOA,EAAOF,IAAKA,EAAKI,OAAQA,UAMnD,MAASoC,SAASC,eAAe,SDE3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.987a9a5b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, useCallback, useMemo, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst DEFAULT_COLOR = \"rgb(61, 104, 146)\";\n\nconst useAudio = (url: string) =>\n  useMemo(() => {\n    const audio = new Audio(url);\n    audio.pause();\n    audio.currentTime = 0;\n    audio.src = url;\n    return audio;\n  }, [url]);\n\ntype SoundProps = {\n  url: string;\n  code?: string;\n  title: string;\n  collection?: string;\n  accent?: string;\n};\nconst Sound = ({ url, code, title, collection, accent }: SoundProps) => {\n  const audio = useAudio(url);\n  const [isPressed, setPressed] = useState(false);\n\n  const stop = useCallback(() => {\n    audio.pause();\n    audio.currentTime = 0;\n    setPressed(false);\n  }, [audio]);\n\n  const play = useCallback(() => {\n    stop();\n    audio.play();\n    setPressed(true);\n  }, [audio, stop]);\n\n  useEffect(() => {\n    const keydownHandler = (e: KeyboardEvent) => {\n      if (e.code === code && !e.repeat) {\n        play();\n      }\n    };\n\n    const keyupHandler = (e: KeyboardEvent) => {\n      if (e.code === code) {\n        stop();\n      }\n    };\n\n    window.addEventListener(\"keydown\", keydownHandler);\n    window.addEventListener(\"keyup\", keyupHandler);\n\n    // cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", keydownHandler);\n      window.removeEventListener(\"keyup\", keyupHandler);\n    };\n  }, [code, play, stop]);\n\n  const key = (code || \"\").replace(/(Key|Digit)/, \"\");\n\n  return (\n    <div\n      className={classnames(\"sound\", isPressed && \"sound--pressed\")}\n      onMouseDown={play}\n      onMouseUp={stop}\n      onTouchStart={play}\n      onTouchEnd={stop}\n      style={{ backgroundColor: accent || DEFAULT_COLOR }}\n    >\n      {key && <div className=\"sound__key\">{key}</div>}\n      <div className=\"sound__title\">{title}</div>\n      {collection && <div className=\"sound__collection\">{collection}</div>}\n    </div>\n  );\n};\n\nconst sounds = [\n  [\n    \"Digit1\",\n    \"Quero café\",\n    \"https://www.myinstants.com/media/sounds/01-jamalicious.mp3\"\n  ],\n  [\n    \"Digit2\",\n    \"Isso aqui é uma porcaria\",\n    \"https://www.myinstants.com/media/sounds/isso-aq-e_j0K5vAG.mp3\"\n  ],\n  [\n    \"Digit3\",\n    \"Que não merda nenhuma\",\n    \"https://www.myinstants.com/media/sounds/merda_nenhuma_rPHmp25.mp3\"\n  ],\n  [\n    \"Digit4\",\n    \"Desculpe\",\n    \"https://www.myinstants.com/media/sounds/desculpa_3vJrBEp.mp3\"\n  ],\n  [\n    \"\",\n    \"Desculpe\",\n    \"https://www.myinstants.com/media/sounds/desculpa_3vJrBEp.mp3\"\n  ],\n  [\n    \"Enter\",\n    \"Desculpe\",\n    \"https://www.myinstants.com/media/sounds/desculpa_3vJrBEp.mp3\"\n  ],\n  [\n    \"Space\",\n    \"Desculpe\",\n    \"https://www.myinstants.com/media/sounds/desculpa_3vJrBEp.mp3\"\n  ],\n  [\n    \"KeyJ\",\n    \"Aqui é Jamal\",\n    \"https://www.myinstants.com/media/sounds/aqui-e-jamal-ok.mp3\",\n    \"brown\"\n  ]\n];\n\nconst App = () => {\n  return (\n    <div className=\"board\">\n      {sounds.map(([code, title, url, accent], i) => (\n        <Sound key={i} code={code} title={title} url={url} accent={accent} />\n      ))}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}